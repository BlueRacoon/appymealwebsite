# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  # The Node.js orb contains a set of prepackaged CircleCI configuration you can utilize
  # Orbs reduce the amount of configuration required for common tasks.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/node
  node: circleci/node@5.0.3
  kubernetes: circleci/kubernetes@1.3.1

jobs:
  install_dependencies:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/node
    docker:
      - image: cimg/node:18.13
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      # Checkout the code as the first step.
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Setup NVM
          command: |
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
            echo 'export NVM_DIR=$HOME/.nvm' >> $BASH_ENV
            echo 'source $NVM_DIR/nvm.sh' >> $BASH_ENV
      - run:
          name: Install Dependencies
          command: npm install ci
      - persist_to_workspace:
          root: ~/
          paths:
            - project
  test:
    docker:
      - image: cimg/node:18.13
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: ~/
      - run:
          name: Run Unit Tests
          command: npm run test:ci
  docker_build_publish_images:
    docker:
      - image: cimg/go:1.20.0
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD
    environment:
      CICD_BRANCH: << pipeline.git.branch >>
      GIT_SHA: << pipeline.git.revision >>
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
            at: ~/
      - run: |
          echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USER" --password-stdin
      - run:
          name: Build Docker Images
          command: ./_bin/cicd/build.sh
      - add_ssh_keys:
          fingerprints:
            - "b6:59:53:65:90:45:d2:eb:4d:db:2b:c9:ba:0f:17:a0"
      - run:
          name: Publish Docker Images
          command: ./_bin/cicd/publish.sh

workflows:
  # Below is the definition of your workflow.
  # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the install_dependencies and test jobs above.
  # CircleCI will run this workflow on every commit.
  # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
  build_and_test:
    jobs:
      - install_dependencies
      - test:
          requires:
          - install_dependencies
      - docker_build_publish_images:
          requires:
          - install_dependencies
          filters:
            branches:
              only:
                - stage
